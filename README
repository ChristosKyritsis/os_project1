ΠΑΡΑΔΟΧΕΣ:
    Η εργασία έχει όλα όσα ζητάει η εκφώνηση με μόνη εξαίρεση πως για τον τερματισμό της θα πρέπει
    και οι δύο διεργασίες Α και Β να γράψουν το μήνυμα τερματισμού στον τερματικό τους.
    Επίσης, κάτι το οποίο αποτελεί σχειδαστική επιλογή είναι πως στην περίπτωση που δεν δωθούν
    μηνύματα σε κάποια από τις 2 διεργασίες (ή και στις 2) και δωθεί κατευθείαν μήνυμα τερματισμού
    στις εκτυπώσεις αντί της εμφάνισης του -nan και nan αντίστοιχα προτιμήθηκε να εμφανιστεί μήνυμα
    πως δεν υπήρξαν μηνύματα.



Η υλοποίηση της εργασίας αποτελείται από:
    Τα folders:
        include
        src
    καθώς και τα folders:
        bin
        build
    τα οποία δημιουργούνται απο το Makefile κάνοντας την εντολή make στο terminal

    Τα παραπάνω folders περιέχουν τα εξής:
    include:
            
        inc.h :
            Το οποίο περιλαμβάνει όλα τα απαραίτητα includes τα οποία χρειάζονται οι διεργασίες,
            καθώς και τα defines. Περιέχει επίσης ένα struct το οποίο είναι η κοινή μνήμη στο
            οποίο αποθηκεύονται όλα τα απαραίτητα στοιχεία, όπως οι 2 σημαφόροι που χρειάζονται
            για την επικοινωνία των δύο διεργασιών, οι μετρητές count της διεργασίας Α και Β
            αντίστοιχα που δείχνουν πόσα μηνύματα έχει στείλει/λάβει η κάθε διεργασία, οι δύο
            buffers στους οποίους αποθηκεύονται τα μηνύματα που στέλνει η κάθε διεργασία στην
            άλλη, το συνολικό μέγεθος των μηνυμάτων που έχει λάβει κάθε διεργασία και τέλος τον
            συνολικό χρόνο αναμονής που χρειάστηκε για την παραλαβή του πρώτου τεμαχίου, τα οποία
            μοιράζονται μεταξύ των διεργασιών A και B. Τέλος, περιέχει και τα πρότυπα των 
            συναρτήσεων του αρχείου inc.c .
        inc.c :
            Στο αρχείο inc.c υπάρχουν οι συναρτήσεις που διαχειρίζονται τα κοινά δεδομένα των 2
            διεργασιών A και B. Συγκεκριμένα, η συνάρτηση initialize_data αρχικοποιεί τους 2
            σημαφόρους όπου για δεύτερο όρισμα έχει την τιμή 0, το οποίο σημαίνει πως και οι 2
            σημαφόροι θα είναι ορατοί και απο τις 2 διεργασίες. Το τρίτο όρισμα είναι επίσης 0
            το οποίο υποδεικνύει ότι οι σημαφόροι θα έχουν ως αρχική τιμή τους το 0. Στη συνέχεια,
            η initialize_data αρχικοποιεί σε 0 όλες τις υπόλοιπες μεταβλητές του struct δείχνοντας
            πως μόλις ξεκίνησε και δεν έχει γίνει update σε καμία από τις μεταβλητές.
            Στη συνάρτηση print_data εφόσον έχει δημιουργηθεί η κοινή μνήμη γίνονται οι απαραίτητες
            εκτυπώσεις μηνυμάτων, λαμβάνοντας υπόψιν τις περιπτώσεις που κάποια διεργασία δεν έχει
            λάβει κάποιο μήνυμα.
            Τέλος, η συνάρτηση free_data ελευθερώνει τους σημαφόρους που αρχικοοπιήθηκαν με την
            sem_init, κάνοντας sem_destroy.


    src:

        procA.c :
            Το αρχείο procA.c είναι υπεύθυνο για την δημιουργία κοινής μνήμης, την αρχικοποίηση
            των δεδομένων, καθώς και την ελευθέρωση όλων των πόρων αυτών. Στην αρχή του αρχείου
            procA.c γίνεται ένα define για την χρήση της συνάρτησης ftruncate. 
            
            Ξεκινώντας από την main συνάρτηση, η διεργασία Α περιμένει από τον χρήστη να δώσει
            ένα όνομα στην γραμμή εντολών για να το χρησιμοποιήσει στην αρχικοποίηση της κοινής
            μνήμης. Στη συνέχεια, δημιουργείται η κοινή μνήμη με την shm_open. Συγκεκριμένα, το
            O_CREAT σημαίνει πως αν δεν υπάρχει ήδη το αντικείμενο κοινής μνήμης το δημιουργεί, 
            το O_EXCL σημαίνει πως αν υπάρχει θα επιστραφεί μήνυμα λάθους και το O_RDRW σημαίνει
            πως η κοινή μνήμη θα επιτρέπει ανάγνωση και εγγραφή. Η συνάρτηση ftruncate μεταβάλει
            το μέγεθος του αρχείου , ώστε να χωρέσουν τα δεδομένα και η mmap κάνει mapping δηλαδή
            αντιστοιχίζει την κοινή μνήμη στην διεργασία. Το MAP_SHARED υποδηλώνει πως τυχόν
            αλλαγές θα είναι ορατές και από την όλες τις άλλες διεργασίες, δηλαδή σε αυτή την
            περίπτωση την διεργασία Β. Έπειτα, εφόσον η διεργασία Α είναι υπεύθυνη για την
            αρχικοποίηση των δεδομένων, τα αρχικοποιεί και στη συνέχεια δημιουργεί τα νήματα με
            την συνάρτηση pthread_create και με την συνάρτηση pthread_join κάνει join στα thread
            τα οποία δημιούργησε. Τέλος, εφόσον βγει από τα νήματα ελευθερώνει τα δεδομένα με την
            free_data και στη συνέχεια με την χρήση της munmap ελευθερώνει τη μνήμη η οποία έγινε
            στην αρχή από την mmap και απελευθερώνει το όνομα το οποίο δώθηκε από τον χρήστη στην
            γραμμή εντολών για την κοινή μνήμη.
            Να σημειωθεί, πως για κάθε μία από τις συναρτήσεις γίνεται έλεγχος για αποτυχία της, 
            στην οποία περίπτωση γίνεται έξοδος με μήνυμα αποτυχίας.

            Στη συνάρτηση input_thread δίνονται ως όρισμα τα δεδομένα και σε έναν ατέρμον βρόγχο
            η διεργασία Α στέλνει στην διεργασία Β μηνύματα τα οποία ο χρήστης δίνει μέσω της fgets.
            Έπειτα, η συνάρτηση κάνει post τον σημαφόρο ο οποίος είναι υπέυθυνος να ενημερώσει το
            νήμα της διεργασίας Β που έχει αναλάβει να λαμβάνει τα μηνύματα της Α πως ήρθε η σειρά
            του για εκτέλεση. Επίσης, η συνάρτηση αυτή ελέγχει αν δώθηκε μήνυμα τερματισμού στην
            οποία περίπτωση εκτυπώνει τα δεδομένα και τερματίζει το thread.

            Η συνάρτηση receive_thread της διεργασίας Α μέσα σε έναν ατέρμον βρόγχο περιμένει από 
            το thread της διεργασίας Β που έχει αναλάβει να στέλνει μηνύματα στην διεργασία Α να 
            κάνει post τον σημαφόρο της, ώστε να εκτελέσει τον κώδικα εκτύπωσης του μηνύματος. 
            Όταν γίνει αυτό παίρνει τη χρονική στιγμή που έγινε το post και κοιτάει αν το μήνυμα 
            που δέχτηκε είναι μήνυμα τερματισμού. Αν όχι, τότε κάνει έναν έλεγχο για το μέγεθος 
            του μηνύματος και σε περίπτωση που αυτό ξεπερνάει το MAX_SIZE_OF_MESSAGE, δηλαδή 15
            στην περίπτωσή μας, τότε εκτυπώνει το μήνυμα σε μικρότερα μηνύματα μεγέθους 15, ίσο
            δηλαδή με το MAX_SIZE_OF_MESSAGE. Όταν γίνει αυτό, παίρνει τη χρονική στιγμή και 
            ενημερώνει τα δεδομένα.


        procB.c :
            Το αρχείο procB.c είναι παρόμοιο με το procA.c δίοτι εκτελεί παρόμοιο έργο.
            Συγκεκριμένα:

            Η συνάρτηση main ανοίγει την κοινή μνήμη η οποία δώθηκε στην γραμμή εντολών από τον 
            χρήστη και έχει ανοιχτεί από την διεργασία Α. Έπειτα, δημιουργεί και μπαίνει στα 
            νήματα που δημιούργησε και βγαίνοντας κάνει munmap ώστε να ελευθερώσει τη μνήμη της
            mmap.

            Η συνάρτηση input_thread_B όμοια με την input_thread της διεργασίας Α αναλαμβάνει να
            στείλει το μήνυμα το οποίο ο χρήστης έδωσε μέσω της fgets στην γραμμή εντολών στην
            διεργασία Α. Ελέγχει επίσης, αν το μήμυμα του χρήστη είναι το μήνυμα τερματισμού.
            Σε αυτή την περίπτωση εκτυπώνει τα δεδομένα και βγαίνει από το thread.

            Η συνάρτηση receive_thread_B περιμένει από το νήμα input_thread της διεργασίας Α να
            δώσει το μήμυμα και εφόσον το δώσει ξεκινάει την χρονομέτρηση αποθηκεύοντας την 
            χρονική στιγμή που έλαβε το μήνυμα από την διεργασία Α. Στη συνέχεια ελέγχει αν δώθηκε
            μήνυμα τερματισμού με σκοπό να μην το εκτυπώσει και σε διαφορετική περίπτωση εκτυπώνει
            το μήνυμα ανάλογα με το μέγεθός του, είτε ολόκληρο, ή αν είναι μεγαλύτερο μέγεθος του
            MAX_SIZE_OF_MESSAGE σε μικρότερα μηνύματα μεγέθους MAX_SIZE_OF_MESSAGE το πολύ. Τέλος,
            λαμβάνει την χρονική στιγμή που τελείωσε αυτή η διαδικασία και ενημερώνει κατάλληλα τα
            δεδομένα.



    Περιέχει επίσης και ένα Makefile το οποίο περιλαμβάνει τα κατάλληλα flags ώστε να κάνει compile
    τα προγράμματα. Με την εντολή make γίνεται το compile των αρχείων και η δημιουργία των φακέλων
    bin και build. Το Makefile περιέχει ακόμα την εντολή make clean η οποία διαγράφει τα folders
    bin και build καθώς και τα αντικείμενα και εκτελέσιμα προγράμματα που περιέχονται σε αυτούς 
    τους φακέλους.



ΠΛΗΡΟΦΟΡΙΕΣ ΓΙΑ ΕΚΤΕΛΕΣΗ:
    Για την εκτέλεση θα πρέπει εφόσον ανοιχτούν 2 τερματικά να γίνει σε ένα από τα δύο η εντολή
    make η οποία θα μεταγλωτίσει τα προγράμματα Α και Β και έπειτα για να τρέξουμε τα προγράμματα
    θα πρέπει στο ένα από τα δύο τερματικά να δωθεί η εντολή:
     ./bin/procA arg 
    όπου εδώ το arg θα μπορούσε να είναι οποιδήποτε όρισμα θελήσει να δώσει ο χρήστης και αντίστοιχα
    στο άλλο τερματικό δίνεται η εντολή:
    ./bin/procB arg 
    όπου στην συγκεκριμένη περίπτωση θα πρέπει το arg να είναι ίδιο με αυτό του άλλου τερματικού.

    Σε περίπτωση που δεν δωθεί από τον χρήστη κάποιο argument στην γραμμή εντολών το πρόγραμμα θα
    τερματίσει εμφανίζοντας ανάλογο μήνυμα.

    Δίνεται επίσης η δυνατότητα της εντολής make clean η οποία αφαιρεί τους φακέλους bin και build
    καθώς και τα αρχεία που αυτοί έχουν μέσα τους.


ΑΠΟΤΕΛΕΣΜΑΤΑ ΠΡΟΣΟΜΟΙΩΣΗΣ:
    Για έλεγχο ορθότητας της εργασίας παρακάτω παρέχονται 3 διαφορετικές εκτελέσεις που έχουν ως
    σκοπό τον έλεγχο διαφόρων περιπτώσεων που θεωρήθηκαν ότι λαμβάνουν υπόψη κάποια απαραίτητα
    σημεία που πρέπει να ελεγχθούν. 

    Συγκεκριμένα, η πρώτη εκτέλεση περιλαμβάνει μία κανονική περίπτωση συνομιλίας των διεργασιών
    Α και Β, όπου κάποια διεργασία στέλνει συνεχόμενα μηνύματα για να δείξει πως το πρόγραμμα δεν
    περιορίζεται σε κάποια χρονική σειρά μεταξύ των διεργασιών. Σε κάποιο σημείο στέλνονται επίσης
    μηνύματα μεγέθους άνω των 15 χαρακτήρων για να απεικονήσει την αντιμετώπιση του προγράμματος σε
    μία τέτοια περίπτωση.
    Η δεύτερη εκτέλεση δείχνει την περίπτωση στην οποία μία από τις δυο διεργασίες δεν στείλει κάποιο
    μήνυμα, όπου και εμφανίζεται στα στατιστικά ανάλογο μήνυμα.
    Τέλος, η τρίτη και τελευταία εκτέλεση, δείχνει την περίπτωση όπου και οι 2 διεργασίες δεν στέλνουν
    μήνυμα, αντιθέτως πληκτρολογείται κατευθείαν το μήνυμα τερματισμού.

    ΣΗΜΕΙΩΣΗ: σε κάποια σημεία μπορεί να φαίνεται πως εκτυπώνει μηνύματα 14 χαρακτήρων, αλλά στην
    πραγματικότητα εκτυπώνει 15, απλά ο χαρακτήρας του κενού δεν εμφανίζεται.




    ΕΚΤΕΛΕΣΗ 1:
        terminal1: 

        ./bin/procA test1
        -----THIS IS PROCESS A-----
        hello procB
        Process B sent: hi procA

        Process B sent: how are you?

        Thank you!! Im good. How about you?
        The message that Process B sent was over 15 characters so it will be printed in strings of
        15 at most

        Process B sent:
        String number 1     Im also good!. 
        String number 2     So, what are yo
        String number 3     u up to these d
        String number 4     ays. Or in the 
        String number 5     past month.

        The message that Process B sent was over 15 characters so it will be printed in strings of
        15 at most

        Process B sent:
        String number 1     everything alri
        String number 2     ght?

        yeah not much
        look i have to go now, so we will talk another time. Bye!
        Process B sent: bye

        #BYE#

        -----END OF PROCESS-----


        -----STATISTICS-----

        Number of messages process A has sent: 4
        Number of messages process A has received: 5 
        Number of messages process B has sent: 5 
        Number of messages process B has received: 4 
        Total number of pieces in process A: 113   
        Total number of pieces in process B: 116
        Average number of pieces in process A: 28.2
        Average number of pieces in process B: 23.2
        Total waiting time in procees A: 0.000353
        Total waiting time in procees B: 0.000327
        Average waiting time in process A: 0.000088
        Average waiting time in process B: 0.000065



        terminal2 :

        /bin/procB test1
        -----THIS IS PROCESS B-----

        Process A sent: hello procB

        hi procA
        how are you?
        The message that Process A sent was over 15 characters so it will be printed in strings of
        15 at most

        Process A sent:
        String number 1:    Thank you!! Im  
        String number 2:    good. How about
        String number 3:     you? 

        Im also good!. So, what are you up to these days. Or in the past month.
        everything alright?
        Process A sent: yeah not much

        The message that Process A sent was over 15 characters so it will be printed in strings of
        15 at most

        Process A sent:
        String number 1:    look i have to
        String number 2:    go now, so we w
        String number 3:    ill talk anothe
        String number 4:    r time. Bye!

        bye
        #BYE#

        -----END OF PROCESS-----


        -----STATISTICS-----

        Number of messages process A has sent: 4
        Number of messages process A has received: 5 
        Number of messages process B has sent: 5 
        Number of messages process B has received: 4 
        Total number of pieces in process A: 113   
        Total number of pieces in process B: 116
        Average number of pieces in process A: 28.2
        Average number of pieces in process B: 23.2
        Total waiting time in procees A: 0.000353
        Total waiting time in procees B: 0.000327
        Average waiting time in process A: 0.000088
        Average waiting time in process B: 0.000065





    ΕΚΤΕΛΕΣΗ 2:
        terminal1:

        ./bin/procA test2
        -----THIS IS PROCESS A-----

        The message that Process B sent was over 15 characters so it will be printed in strings of
        15 at most

        Process B sent:
        String number 1:    Hello procA. I 
        String number 2:    want you to not
        String number 3:     type any messa
        String number 4:    ge so i can see
        String number 5:     what is going 
        String number 6:    to be printed a
        String number 7:    t the end. Just
        String number 8:     type #BYE#

        #BYE#

        -----END OF PROCESS-----


        -----STATISTICS-----

        Number of messages process A has sent: 0
        Number of messages process A has received: 1 
        Number of messages process B has sent: 1 
        Number of messages process B has received: 0 
        Total number of pieces in process A: 116   
        Total number of pieces in process B: 0
        Average number of pieces in process A: cannot be calculated because process A sent no messages
        Average number of pieces in process B: 0.0
        Total waiting time in procees A: 0.000203
        Total waiting time in procees B: 0.000000
        Average waiting time in process A: cannot be calculated because process A sent no messages
        Average waiting time in process B: 0.000000



        terminal2:

        ./bin/procB test2
        -----THIS IS PROCESS B-----

        Hello procA. I want you to not type any message so i can see what is going to be printed at the end. Just type #BYE#
        #BYE#

        -----END OF PROCESS-----


        -----STATISTICS-----

        Number of messages process A has sent: 0
        Number of messages process A has received: 1 
        Number of messages process B has sent: 1 
        Number of messages process B has received: 0 
        Total number of pieces in process A: 116   
        Total number of pieces in process B: 0
        Average number of pieces in process A: cannot be calculated because process A sent no messages
        Average number of pieces in process B: 0.0
        Total waiting time in procees A: 0.000203
        Total waiting time in procees B: 0.000000
        Average waiting time in process A: cannot be calculated because process A sent no messages
        Average waiting time in process B: 0.000000
        




    ΕΚΤΕΛΕΣΗ 3:
        terminal1:

        ./bin/procA test3
        -----THIS IS PROCESS A-----

        #BYE#

        -----END OF PROCESS-----

        -----STATISTICS-----

        Number of messages process A has sent: 0
        Number of messages process A has received: 0 
        Number of messages process B has sent: 0 
        Number of messages process B has received: 0 
        Total number of pieces in process A: 0   
        Total number of pieces in process B: 0
        Average number of pieces in process A: cannot be calculated because process A sent no messages
        Average number of pieces in process B: cannot be calculated because process B sent no messages
        Total waiting time in procees A: 0.000000
        Total waiting time in procees B: 0.000000
        Average waiting time in process A: cannot be calculated because process A sent no messages
        Average waiting time in process B: cannot be calculated because process B sent no messages



        terminal2:

        ./bin/procB test3
        -----THIS IS PROCESS B-----

        #BYE#

        -----END OF PROCESS-----

        -----STATISTICS-----

        Number of messages process A has sent: 0
        Number of messages process A has received: 0 
        Number of messages process B has sent: 0 
        Number of messages process B has received: 0 
        Total number of pieces in process A: 0   
        Total number of pieces in process B: 0
        Average number of pieces in process A: cannot be calculated because process A sent no messages
        Average number of pieces in process B: cannot be calculated because process B sent no messages
        Total waiting time in procees A: 0.000000
        Total waiting time in procees B: 0.000000
        Average waiting time in process A: cannot be calculated because process A sent no messages
        Average waiting time in process B: cannot be calculated because process B sent no messages